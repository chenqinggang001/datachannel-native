# config start
IceServerType = enum {
    Stun;
    Turn;
}

IceServerRelayType = enum {
    TurnUdp;
    TurnTcp;
    TurnTls;
}

IceServer = record {
    url: optional<string>;
    hostname: string;
    port: i16;
    type: IceServerType;
    username: string;
    password: string;
    relayType: IceServerRelayType;
}

ProxyServerType = enum {
    Http;
    Socks5;
}

ProxyServer = record {
    type: ProxyServerType;
    hostname: string;
    port: i16;
    username: optional<string>;
    password: optional<string>;
}

CertificateType = enum {
    Default;
    Ecdsa;
    Rsa;
}

TransportPolicy = enum {
    All;
    Relay;
}

Configuration = record {
    iceServers: list<IceServer>;
    proxyServer: optional<ProxyServer>;
    bindAddress: optional<string>;

    certificateType: CertificateType;
    iceTransportPolicy: TransportPolicy;

    enableIceTcp: bool;
    enableIceUdpMux: bool;
    disableAutoNegotiation: bool;
    forceMediaTransport: bool;

    portRangeBegin: i32;
    portRangeEnd: i32;

    mtu: optional<i32>;
    maxMessageSize: optional<i32>;
}
#config end

# DC start
ReliabilityType = enum {
    Reliable;
    Rexmit;
    Timed;
}

Reliability = record {
    type: ReliabilityType;
    unordered: bool;
    rexmit_ms: i64;
}

DataChannelInit = record {
    reliability: Reliability;
    negotiated: bool;
    id: optional<i16>;
    protocol: string;
}

DcMessageCallback = interface +j +o {
    onText(msg: string);
    onBinary(msg: binary);
}

DcEventCallback = interface +j +o {
    onEvent();
}

DcErrorCallback = interface +j +o {
    onError(error: string);
}

DataChannel = interface +c {
    close();
    sendText(msg: string): bool;
    sendBinary(msg: binary): bool;

    isOpen(): bool;
    isClosed(): bool;
    maxMessageSize(): i32;
    bufferedAmount(): i32;

    onOpen(callback: DcEventCallback);
    onClosed(callback: DcEventCallback);
    onError(callback: DcErrorCallback);

    onMessage(callback: DcMessageCallback);

    onBufferedAmountLow(callback: DcEventCallback);
    setBufferedAmountLowThreshold(amount: i32);
}
# DC end

# PC start
SdpCallback = interface +j +o {
    onSdp(sdp: string);
}

CandidateCallback = interface +j +o {
    onCandidate(candidate: string, mid: string);
}

IceState = enum {
    New;
    Connecting;
    Connected;
    Disconnected;
    Failed;
    Closed;
}

IceStateCallback = interface +j +o {
    onStateChanged(state: IceState);
}

GatheringState = enum {
    New;
    InProgress;
    Complete;
}

GatheringStateCallback = interface +j +o {
    onStateChanged(state: GatheringState);
}

DcCallback = interface +j +o {
    onDataChannel(dc: DataChannel);
}

PeerConnection = interface +c {
    close();
    setRemoteDescription(sdp: string);
    addRemoteCandidate(candidate: string, mid: string);

    onLocalDescription(callback: SdpCallback);
    onLocalCandidate(callback: CandidateCallback);
    onStateChange(callback: IceStateCallback);
    onGatheringStateChange(callback: GatheringStateCallback);

    onDataChannel(callback: DcCallback);
    createDataChannel(label: string, init: DataChannelInit): DataChannel;

    static create(config: Configuration): PeerConnection;
}
