// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libdc.djinni

package com.cdnbye.libdc;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public interface DataChannel {
    public void close();

    public boolean sendText(@NonNull String msg);

    public boolean sendBinary(@NonNull byte[] msg);

    public boolean isOpen();

    public boolean isClosed();

    public int maxMessageSize();

    public int bufferedAmount();

    public void onOpen(@Nullable DcEventCallback callback);

    public void onClosed(@Nullable DcEventCallback callback);

    public void onError(@Nullable DcErrorCallback callback);

    public void onMessage(@Nullable DcMessageCallback callback);

    public void onBufferedAmountLow(@Nullable DcEventCallback callback);

    public void setBufferedAmountLowThreshold(int amount);

    static final class CppProxy implements DataChannel
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public boolean sendText(String msg)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendText(this.nativeRef, msg);
        }
        private native boolean native_sendText(long _nativeRef, String msg);

        @Override
        public boolean sendBinary(byte[] msg)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_sendBinary(this.nativeRef, msg);
        }
        private native boolean native_sendBinary(long _nativeRef, byte[] msg);

        @Override
        public boolean isOpen()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isOpen(this.nativeRef);
        }
        private native boolean native_isOpen(long _nativeRef);

        @Override
        public boolean isClosed()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isClosed(this.nativeRef);
        }
        private native boolean native_isClosed(long _nativeRef);

        @Override
        public int maxMessageSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_maxMessageSize(this.nativeRef);
        }
        private native int native_maxMessageSize(long _nativeRef);

        @Override
        public int bufferedAmount()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_bufferedAmount(this.nativeRef);
        }
        private native int native_bufferedAmount(long _nativeRef);

        @Override
        public void onOpen(DcEventCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onOpen(this.nativeRef, callback);
        }
        private native void native_onOpen(long _nativeRef, DcEventCallback callback);

        @Override
        public void onClosed(DcEventCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onClosed(this.nativeRef, callback);
        }
        private native void native_onClosed(long _nativeRef, DcEventCallback callback);

        @Override
        public void onError(DcErrorCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onError(this.nativeRef, callback);
        }
        private native void native_onError(long _nativeRef, DcErrorCallback callback);

        @Override
        public void onMessage(DcMessageCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onMessage(this.nativeRef, callback);
        }
        private native void native_onMessage(long _nativeRef, DcMessageCallback callback);

        @Override
        public void onBufferedAmountLow(DcEventCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onBufferedAmountLow(this.nativeRef, callback);
        }
        private native void native_onBufferedAmountLow(long _nativeRef, DcEventCallback callback);

        @Override
        public void setBufferedAmountLowThreshold(int amount)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBufferedAmountLowThreshold(this.nativeRef, amount);
        }
        private native void native_setBufferedAmountLowThreshold(long _nativeRef, int amount);
    }
}
