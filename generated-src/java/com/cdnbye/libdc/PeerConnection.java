// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libdc.djinni

package com.cdnbye.libdc;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public interface PeerConnection {
    public void close();

    public void setRemoteDescription(@NonNull String sdp);

    public void addRemoteCandidate(@NonNull String candidate, @NonNull String mid);

    public void onLocalDescription(@Nullable SdpCallback callback);

    public void onLocalCandidate(@Nullable CandidateCallback callback);

    public void onStateChange(@Nullable IceStateCallback callback);

    public void onGatheringStateChange(@Nullable GatheringStateCallback callback);

    public void onSignalingStateChange(@Nullable SignalingStateCallback callback);

    public void onDataChannel(@Nullable DcCallback callback);

    @Nullable
    public DataChannel createDataChannel(@NonNull String label, @NonNull DataChannelInit init);

    @Nullable
    public static PeerConnection create(@NonNull Configuration config)
    {
        return CppProxy.create(config);
    }

    public static void initLogger(@NonNull LogLevel level, @Nullable LogCallback callback)
    {
        CppProxy.initLogger(level,
                            callback);
    }

    static final class CppProxy implements PeerConnection
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public void setRemoteDescription(String sdp)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRemoteDescription(this.nativeRef, sdp);
        }
        private native void native_setRemoteDescription(long _nativeRef, String sdp);

        @Override
        public void addRemoteCandidate(String candidate, String mid)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addRemoteCandidate(this.nativeRef, candidate, mid);
        }
        private native void native_addRemoteCandidate(long _nativeRef, String candidate, String mid);

        @Override
        public void onLocalDescription(SdpCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLocalDescription(this.nativeRef, callback);
        }
        private native void native_onLocalDescription(long _nativeRef, SdpCallback callback);

        @Override
        public void onLocalCandidate(CandidateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLocalCandidate(this.nativeRef, callback);
        }
        private native void native_onLocalCandidate(long _nativeRef, CandidateCallback callback);

        @Override
        public void onStateChange(IceStateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onStateChange(this.nativeRef, callback);
        }
        private native void native_onStateChange(long _nativeRef, IceStateCallback callback);

        @Override
        public void onGatheringStateChange(GatheringStateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onGatheringStateChange(this.nativeRef, callback);
        }
        private native void native_onGatheringStateChange(long _nativeRef, GatheringStateCallback callback);

        @Override
        public void onSignalingStateChange(SignalingStateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSignalingStateChange(this.nativeRef, callback);
        }
        private native void native_onSignalingStateChange(long _nativeRef, SignalingStateCallback callback);

        @Override
        public void onDataChannel(DcCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onDataChannel(this.nativeRef, callback);
        }
        private native void native_onDataChannel(long _nativeRef, DcCallback callback);

        @Override
        public DataChannel createDataChannel(String label, DataChannelInit init)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_createDataChannel(this.nativeRef, label, init);
        }
        private native DataChannel native_createDataChannel(long _nativeRef, String label, DataChannelInit init);

        @Nullable
        public static native PeerConnection create(@NonNull Configuration config);

        public static native void initLogger(@NonNull LogLevel level, @Nullable LogCallback callback);
    }
}
