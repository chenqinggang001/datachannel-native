// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from libdc.djinni

package com.cdnbye.libdc;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class PeerConnection {
    public abstract void close();

    public abstract void setRemoteDescription(@NonNull String sdp);

    public abstract void addRemoteCandidate(@NonNull String candidate, @NonNull String mid);

    public abstract void onLocalDescription(@Nullable SdpCallback callback);

    public abstract void onLocalCandidate(@Nullable CandidateCallback callback);

    public abstract void onStateChange(@Nullable IceStateCallback callback);

    public abstract void onGatheringStateChange(@Nullable GatheringStateCallback callback);

    public abstract void onSignalingStateChange(@Nullable SignalingStateCallback callback);

    @NonNull
    public abstract IceState state();

    @NonNull
    public abstract GatheringState gatheringState();

    @NonNull
    public abstract SignalingState signalingState();

    public abstract void clearStats();

    public abstract int bytesSent();

    public abstract int bytesReceived();

    public abstract long rtt();

    public abstract void onDataChannel(@Nullable DcCallback callback);

    @Nullable
    public abstract DataChannel createDataChannel(@NonNull String label, @NonNull DataChannelInit init);

    @Nullable
    public static native PeerConnection create(@NonNull Configuration config);

    public static native void initLogger(@NonNull LogLevel level, @Nullable LogCallback callback);

    public static final class CppProxy extends PeerConnection
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void close()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_close(this.nativeRef);
        }
        private native void native_close(long _nativeRef);

        @Override
        public void setRemoteDescription(String sdp)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRemoteDescription(this.nativeRef, sdp);
        }
        private native void native_setRemoteDescription(long _nativeRef, String sdp);

        @Override
        public void addRemoteCandidate(String candidate, String mid)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addRemoteCandidate(this.nativeRef, candidate, mid);
        }
        private native void native_addRemoteCandidate(long _nativeRef, String candidate, String mid);

        @Override
        public void onLocalDescription(SdpCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLocalDescription(this.nativeRef, callback);
        }
        private native void native_onLocalDescription(long _nativeRef, SdpCallback callback);

        @Override
        public void onLocalCandidate(CandidateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onLocalCandidate(this.nativeRef, callback);
        }
        private native void native_onLocalCandidate(long _nativeRef, CandidateCallback callback);

        @Override
        public void onStateChange(IceStateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onStateChange(this.nativeRef, callback);
        }
        private native void native_onStateChange(long _nativeRef, IceStateCallback callback);

        @Override
        public void onGatheringStateChange(GatheringStateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onGatheringStateChange(this.nativeRef, callback);
        }
        private native void native_onGatheringStateChange(long _nativeRef, GatheringStateCallback callback);

        @Override
        public void onSignalingStateChange(SignalingStateCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSignalingStateChange(this.nativeRef, callback);
        }
        private native void native_onSignalingStateChange(long _nativeRef, SignalingStateCallback callback);

        @Override
        public IceState state()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_state(this.nativeRef);
        }
        private native IceState native_state(long _nativeRef);

        @Override
        public GatheringState gatheringState()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_gatheringState(this.nativeRef);
        }
        private native GatheringState native_gatheringState(long _nativeRef);

        @Override
        public SignalingState signalingState()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_signalingState(this.nativeRef);
        }
        private native SignalingState native_signalingState(long _nativeRef);

        @Override
        public void clearStats()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clearStats(this.nativeRef);
        }
        private native void native_clearStats(long _nativeRef);

        @Override
        public int bytesSent()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_bytesSent(this.nativeRef);
        }
        private native int native_bytesSent(long _nativeRef);

        @Override
        public int bytesReceived()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_bytesReceived(this.nativeRef);
        }
        private native int native_bytesReceived(long _nativeRef);

        @Override
        public long rtt()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_rtt(this.nativeRef);
        }
        private native long native_rtt(long _nativeRef);

        @Override
        public void onDataChannel(DcCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onDataChannel(this.nativeRef, callback);
        }
        private native void native_onDataChannel(long _nativeRef, DcCallback callback);

        @Override
        public DataChannel createDataChannel(String label, DataChannelInit init)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_createDataChannel(this.nativeRef, label, init);
        }
        private native DataChannel native_createDataChannel(long _nativeRef, String label, DataChannelInit init);
    }
}
