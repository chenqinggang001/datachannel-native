// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libdc.djinni

#pragma once

#include "DataChannelInit.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeDataChannelInit final {
public:
    using CppType = ::libdc::DataChannelInit;
    using JniType = jobject;

    using Boxed = NativeDataChannelInit;

    ~NativeDataChannelInit();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeDataChannelInit();
    friend ::djinni::JniClass<NativeDataChannelInit>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/cdnbye/libdc/DataChannelInit") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Lcom/cdnbye/libdc/Reliability;ZLjava/lang/Short;Ljava/lang/String;)V") };
    const jfieldID field_mReliability { ::djinni::jniGetFieldID(clazz.get(), "mReliability", "Lcom/cdnbye/libdc/Reliability;") };
    const jfieldID field_mNegotiated { ::djinni::jniGetFieldID(clazz.get(), "mNegotiated", "Z") };
    const jfieldID field_mId { ::djinni::jniGetFieldID(clazz.get(), "mId", "Ljava/lang/Short;") };
    const jfieldID field_mProtocol { ::djinni::jniGetFieldID(clazz.get(), "mProtocol", "Ljava/lang/String;") };
};

}  // namespace djinni_generated
