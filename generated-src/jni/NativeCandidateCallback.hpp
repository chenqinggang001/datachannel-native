// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from libdc.djinni

#pragma once

#include "CandidateCallback.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeCandidateCallback final : ::djinni::JniInterface<::libdc::CandidateCallback, NativeCandidateCallback> {
public:
    using CppType = std::shared_ptr<::libdc::CandidateCallback>;
    using CppOptType = std::shared_ptr<::libdc::CandidateCallback>;
    using JniType = jobject;

    using Boxed = NativeCandidateCallback;

    ~NativeCandidateCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeCandidateCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeCandidateCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeCandidateCallback();
    friend ::djinni::JniClass<NativeCandidateCallback>;
    friend ::djinni::JniInterface<::libdc::CandidateCallback, NativeCandidateCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::libdc::CandidateCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onCandidate(const std::string & candidate, const std::string & mid) override;

    private:
        friend ::djinni::JniInterface<::libdc::CandidateCallback, ::djinni_generated::NativeCandidateCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/cdnbye/libdc/CandidateCallback") };
    const jmethodID method_onCandidate { ::djinni::jniGetMethodID(clazz.get(), "onCandidate", "(Ljava/lang/String;Ljava/lang/String;)V") };
};

} // namespace djinni_generated
