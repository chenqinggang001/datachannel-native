// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from libdc.djinni

#pragma once

#include "DcCallback.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeDcCallback final : ::djinni::JniInterface<::libdc::DcCallback, NativeDcCallback> {
public:
    using CppType = std::shared_ptr<::libdc::DcCallback>;
    using CppOptType = std::shared_ptr<::libdc::DcCallback>;
    using JniType = jobject;

    using Boxed = NativeDcCallback;

    ~NativeDcCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeDcCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeDcCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeDcCallback();
    friend ::djinni::JniClass<NativeDcCallback>;
    friend ::djinni::JniInterface<::libdc::DcCallback, NativeDcCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::libdc::DcCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onDataChannel(const /*not-null*/ std::shared_ptr<::libdc::DataChannel> & dc) override;

    private:
        friend ::djinni::JniInterface<::libdc::DcCallback, ::djinni_generated::NativeDcCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/cdnbye/libdc/DcCallback") };
    const jmethodID method_onDataChannel { ::djinni::jniGetMethodID(clazz.get(), "onDataChannel", "(Lcom/cdnbye/libdc/DataChannel;)V") };
};

} // namespace djinni_generated
