// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from libdc.djinni

#pragma once

#include "DcMessageCallback.hpp"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeDcMessageCallback final : ::djinni::JniInterface<::libdc::DcMessageCallback, NativeDcMessageCallback> {
public:
    using CppType = std::shared_ptr<::libdc::DcMessageCallback>;
    using CppOptType = std::shared_ptr<::libdc::DcMessageCallback>;
    using JniType = jobject;

    using Boxed = NativeDcMessageCallback;

    ~NativeDcMessageCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeDcMessageCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeDcMessageCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeDcMessageCallback();
    friend ::djinni::JniClass<NativeDcMessageCallback>;
    friend ::djinni::JniInterface<::libdc::DcMessageCallback, NativeDcMessageCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::libdc::DcMessageCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onText(const std::string & msg) override;
        void onBinary(const std::vector<uint8_t> & msg) override;

    private:
        friend ::djinni::JniInterface<::libdc::DcMessageCallback, ::djinni_generated::NativeDcMessageCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/cdnbye/libdc/DcMessageCallback") };
    const jmethodID method_onText { ::djinni::jniGetMethodID(clazz.get(), "onText", "(Ljava/lang/String;)V") };
    const jmethodID method_onBinary { ::djinni::jniGetMethodID(clazz.get(), "onBinary", "([B)V") };
};

} // namespace djinni_generated
