// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from libdc.djinni

#import "DCDataChannel+Private.h"
#import "DCDataChannel.h"
#import "DCDcErrorCallback+Private.h"
#import "DCDcEventCallback+Private.h"
#import "DCDcMessageCallback+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DCDataChannel ()

- (id)initWithCpp:(const std::shared_ptr<::libdc::DataChannel>&)cppRef;

@end

@implementation DCDataChannel {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::libdc::DataChannel>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::libdc::DataChannel>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)sendText:(nonnull NSString *)msg {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sendText(::djinni::String::toCpp(msg));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)sendBinary:(nonnull NSData *)msg {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->sendBinary(::djinni::Binary::toCpp(msg));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isOpen {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isOpen();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isClosed {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isClosed();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)maxMessageSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->maxMessageSize();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)bufferedAmount {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->bufferedAmount();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onOpen:(nullable id<DCDcEventCallback>)callback {
    try {
        _cppRefHandle.get()->onOpen(::djinni_generated::DcEventCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onClosed:(nullable id<DCDcEventCallback>)callback {
    try {
        _cppRefHandle.get()->onClosed(::djinni_generated::DcEventCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onError:(nullable id<DCDcErrorCallback>)callback {
    try {
        _cppRefHandle.get()->onError(::djinni_generated::DcErrorCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onMessage:(nullable id<DCDcMessageCallback>)callback {
    try {
        _cppRefHandle.get()->onMessage(::djinni_generated::DcMessageCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onBufferedAmountLow:(nullable id<DCDcEventCallback>)callback {
    try {
        _cppRefHandle.get()->onBufferedAmountLow(::djinni_generated::DcEventCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBufferedAmountLowThreshold:(int32_t)amount {
    try {
        _cppRefHandle.get()->setBufferedAmountLowThreshold(::djinni::I32::toCpp(amount));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto DataChannel::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto DataChannel::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DCDataChannel>(cpp);
}

}  // namespace djinni_generated

@end
