// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from libdc.djinni

#import "DCPeerConnection+Private.h"
#import "DCPeerConnection.h"
#import "DCCandidateCallback+Private.h"
#import "DCConfiguration+Private.h"
#import "DCDataChannel+Private.h"
#import "DCDataChannelInit+Private.h"
#import "DCDcCallback+Private.h"
#import "DCGatheringState+Private.h"
#import "DCGatheringStateCallback+Private.h"
#import "DCIceState+Private.h"
#import "DCIceStateCallback+Private.h"
#import "DCLogCallback+Private.h"
#import "DCLogLevel+Private.h"
#import "DCSdpCallback+Private.h"
#import "DCSignalingState+Private.h"
#import "DCSignalingStateCallback+Private.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface DCPeerConnection ()

- (id)initWithCpp:(const std::shared_ptr<::libdc::PeerConnection>&)cppRef;

@end

@implementation DCPeerConnection {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::libdc::PeerConnection>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::libdc::PeerConnection>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)close {
    try {
        _cppRefHandle.get()->close();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRemoteDescription:(nonnull NSString *)sdp {
    try {
        _cppRefHandle.get()->setRemoteDescription(::djinni::String::toCpp(sdp));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addRemoteCandidate:(nonnull NSString *)candidate
                       mid:(nonnull NSString *)mid {
    try {
        _cppRefHandle.get()->addRemoteCandidate(::djinni::String::toCpp(candidate),
                                                ::djinni::String::toCpp(mid));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onLocalDescription:(nullable id<DCSdpCallback>)callback {
    try {
        _cppRefHandle.get()->onLocalDescription(::djinni_generated::SdpCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onLocalCandidate:(nullable id<DCCandidateCallback>)callback {
    try {
        _cppRefHandle.get()->onLocalCandidate(::djinni_generated::CandidateCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onStateChange:(nullable id<DCIceStateCallback>)callback {
    try {
        _cppRefHandle.get()->onStateChange(::djinni_generated::IceStateCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onGatheringStateChange:(nullable id<DCGatheringStateCallback>)callback {
    try {
        _cppRefHandle.get()->onGatheringStateChange(::djinni_generated::GatheringStateCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onSignalingStateChange:(nullable id<DCSignalingStateCallback>)callback {
    try {
        _cppRefHandle.get()->onSignalingStateChange(::djinni_generated::SignalingStateCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (DCIceState)state {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->state();
        return ::djinni::Enum<::libdc::IceState, DCIceState>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (DCGatheringState)gatheringState {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->gatheringState();
        return ::djinni::Enum<::libdc::GatheringState, DCGatheringState>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (DCSignalingState)signalingState {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->signalingState();
        return ::djinni::Enum<::libdc::SignalingState, DCSignalingState>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clearStats {
    try {
        _cppRefHandle.get()->clearStats();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)bytesSent {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->bytesSent();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)bytesReceived {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->bytesReceived();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)rtt {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->rtt();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onDataChannel:(nullable id<DCDcCallback>)callback {
    try {
        _cppRefHandle.get()->onDataChannel(::djinni_generated::DcCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable DCDataChannel *)createDataChannel:(nonnull NSString *)label
                                         init:(nonnull DCDataChannelInit *)init {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createDataChannel(::djinni::String::toCpp(label),
                                                                     ::djinni_generated::DataChannelInit::toCpp(init));
        return ::djinni_generated::DataChannel::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable DCPeerConnection *)create:(nonnull DCConfiguration *)config {
    try {
        auto objcpp_result_ = ::libdc::PeerConnection::create(::djinni_generated::Configuration::toCpp(config));
        return ::djinni_generated::PeerConnection::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)initLogger:(DCLogLevel)level
          callback:(nullable id<DCLogCallback>)callback {
    try {
        ::libdc::PeerConnection::initLogger(::djinni::Enum<::libdc::LogLevel, DCLogLevel>::toCpp(level),
                                            ::djinni_generated::LogCallback::toCpp(callback));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto PeerConnection::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto PeerConnection::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<DCPeerConnection>(cpp);
}

} // namespace djinni_generated

@end
